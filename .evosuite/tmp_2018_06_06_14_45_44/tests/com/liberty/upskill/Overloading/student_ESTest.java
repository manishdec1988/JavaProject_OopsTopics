/*
 * This file was automatically generated by EvoSuite
 * Wed Jun 06 18:56:28 GMT 2018
 */

package com.liberty.upskill.Overloading;

import org.junit.Test;
import static org.junit.Assert.*;
import com.liberty.upskill.Overloading.student;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class student_ESTest extends student_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      student student0 = new student();
      student0.studentType = '2';
      char char0 = student0.getStudentType();
      assertEquals('2', char0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      student student0 = new student();
      student0.studentName = "+Wr%6=IdZc5Z";
      String string0 = student0.getStudentName();
      assertEquals("+Wr%6=IdZc5Z", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      student student0 = new student();
      student0.setStudentId(809);
      int int0 = student0.getStudentId();
      assertEquals(809, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      student student0 = new student();
      student0.setStudentId((-957));
      int int0 = student0.getStudentId();
      assertEquals((-957), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      student student0 = new student();
      student0.setResidentialStatus("");
      String string0 = student0.getResidentialStatus();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      student student0 = new student();
      student0.feePerMonth = 87.5027788943145;
      double double0 = student0.getFeePerMonth();
      assertEquals(87.5027788943145, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      student student0 = new student();
      student0.setFeePerMonth((-665.731281108838));
      double double0 = student0.getFeePerMonth();
      assertEquals((-665.731281108838), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      student student0 = new student();
      student0.setStudentName("");
      String string0 = student0.getStudentName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      student student0 = new student();
      double double0 = student0.getFeePerMonth();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      student student0 = new student();
      student0.setStudentType('I');
      char char0 = student0.getStudentType();
      assertEquals('I', char0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      student student0 = new student();
      student0.setResidentialStatus("ov=`ND0-(`");
      String string0 = student0.getResidentialStatus();
      assertEquals("ov=`ND0-(`", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      student student0 = new student();
      student0.calculateFees();
      assertEquals(0.0, student0.getFeePerMonth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      student student0 = new student();
      String string0 = student0.getStudentName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      student student0 = new student();
      String string0 = student0.getResidentialStatus();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      student student0 = new student();
      int int0 = student0.getStudentId();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      student student0 = new student();
      char char0 = student0.getStudentType();
      assertEquals('\u0000', char0);
  }
}
